import { slateToTemplate } from './../serializers';
import { config as defaultTemplateConfig } from './../config/default';
import { Config as SlateToTemplateConfig } from './../config/types';

describe('Template conversion', () => {
  test('convert domhandler element to Template', async () => {
    const slate = [
      {
        children: [
          {
            text: 'Paragraph',
          },
        ],
        type: 'p',
      },
    ];

    const tree = slateToTemplate(slate);
    expect(tree).toMatchInlineSnapshot(`
      [
        "<p>Paragraph</p>",
      ]
    `);
  });

  it('can handle inline code tags', () => {
    const slate = [
      {
        type: 'p',
        children: [
          {
            text: 'This is editable ',
          },
          {
            text: 'rich',
            bold: true,
          },
          {
            text: ' text, ',
          },
          {
            text: 'much',
            italic: true,
          },
          {
            text: ' better than a ',
          },
          {
            text: '<textarea>',
            code: true,
          },
          {
            text: '!',
          },
        ],
      },
    ];
    const tree = slateToTemplate(slate);
    expect(tree).toMatchInlineSnapshot(`
      [
        "<p>This is editable <strong>rich</strong> text, <i>much</i> better than a <pre><code>&lt;textarea&gt;</code></pre>!</p>",
      ]
    `);
  });

  test('render Slate node as p tag if defaultTag is set', async () => {
    const slate = [
      {
        children: [
          {
            text: 'Paragraph',
          },
        ],
      },
    ];

    const config = {
      ...defaultTemplateConfig,
      defaultTag: 'p',
    };

    const tree = slateToTemplate(slate, config);
    expect(tree).toMatchInlineSnapshot(`
      [
        "<p>Paragraph</p>",
      ]
    `);
  });

  test('respects a function passed as an element transform', async () => {
    const slate = [
      {
        children: [
          {
            text: 'Paragraph',
          },
        ],
        type: 'p',
      },
      {
        children: [
          {
            buttonType: 'primary',
            text: 'Button',
          },
        ],
        type: 'button',
      },
    ];

    const config: SlateToTemplateConfig = {
      ...defaultTemplateConfig,
      customElementSerializers: {
        button: ({ node }) => {
          return () =>
            `<button class="${node.buttonType}">Button HTML string generated by function</button>`;
        },
      },
    };

    const tree = slateToTemplate(slate, config);
    expect(tree).toMatchInlineSnapshot(`
      [
        "<p>Paragraph</p>",
        [Function],
      ]
    `);
  });
});
